// schema.prisma

generator client {
    provider = "prisma-client-js"
    // previewFeatures = ["fullTextSearch","fullTextIndex"]
}

datasource db {
    // provider  = "postgresql"
    // url       = env("DATABASE_URL_POOLED") // uses connection pooling
    // directUrl = env("DATABASE_URL_UNPOOLED") // uses a direct connection
    provider = "sqlite"
    url      = "file:./dev.db"
}

model Todo {
    id        String  @id @default(cuid())
    task      String  @unique
    completed Boolean @default(false)
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// enum UserRole{
//     ADMIN
//     USER
// }

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?

    role String @default("user")
    // role UserRole @default(USER)

    image    String?
    accounts Account[]
    sessions Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
